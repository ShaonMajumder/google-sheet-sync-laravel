# version: '3.8'
# windows tested - sometime needs to close realtime protection in windows
# solved a long time problem - mount whole project folder except vendor folder - which allows `composer install` command to build the packages during `docker-compose build`

services:
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    image: googlesheet-laravel-app
    container_name: googlesheet-laravel-app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      # - .:/var/www/html # mounting resist composer install to be available in runtime
      # âœ… Do NOT mount root folder (.)
      # - ./app:/var/www/html/app
      # - ./bootstrap:/var/www/html/bootstrap
      # - ./config:/var/www/html/config
      # - ./database:/var/www/html/database
      # - ./packages:/var/www/html/packages
      # - ./public:/var/www/html/public
      # - ./resources:/var/www/html/resources
      # - ./routes:/var/www/html/routes
      # - ./storage:/var/www/html/storage
      # - ./tests:/var/www/html/tests
      # - ./artisan:/var/www/html/artisan
      # # # Laravel Source Folders End
      # - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini # Optional: custom PHP config
      - .:/var/www/html  # Mount whole project
      - vendor:/var/www/html/vendor # Except vendor
      - /e/Projects/packages/microservice-utility:/var/www/html/packages/microservice-utility # For windows
      - /e/Projects/packages/caching:/var/www/html/packages/caching # For windows
    networks:
      - laravel

  nginx:
    image: nginx:alpine
    container_name: laravel-nginx
    restart: unless-stopped
    ports:
      - "8000:80"
    volumes:
      - .:/var/www/html
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app
    networks:
      - laravel

  mysql:
    image: mysql:5.7
    container_name: laravel-mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - dbdata:/var/lib/mysql
    networks:
      - laravel

  redis:
    image: redis:alpine
    container_name: laravel-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - laravel
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.18
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - laravel

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.18
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: ${ELK_HOST}
    depends_on:
      - elasticsearch
    networks:
      - laravel

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.18
    container_name: logstash
    volumes:
      - ./docker/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "${LOGSTASH_PORT}:5044"
      - "9600:9600"
    depends_on:
      - elasticsearch
    networks:
      - laravel

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - laravel

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - laravel

volumes:
  dbdata:
  vendor:
  esdata:

networks:
  laravel:
    driver: bridge
