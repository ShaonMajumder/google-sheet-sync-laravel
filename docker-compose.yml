# version: '3.8'
# windows tested - sometime needs to close realtime protection in windows
# solved a long time problem - mount whole project folder except vendor folder - which allows `composer install` command to build the packages during `docker-compose build`

services:
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    image: googlesheet-laravel-app
    container_name: googlesheet-laravel-app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      # - .:/var/www/html # mounting resist composer install to be available in runtime
      # âœ… Do NOT mount root folder (.)
      # - ./app:/var/www/html/app
      # - ./bootstrap:/var/www/html/bootstrap
      # - ./config:/var/www/html/config
      # - ./database:/var/www/html/database
      # - ./packages:/var/www/html/packages
      # - ./public:/var/www/html/public
      # - ./resources:/var/www/html/resources
      # - ./routes:/var/www/html/routes
      # - ./storage:/var/www/html/storage
      # - ./tests:/var/www/html/tests
      # - ./artisan:/var/www/html/artisan
      # # # Laravel Source Folders End
      - .:/var/www/html  # Mount whole project
      - vendor:/var/www/html/vendor # Except vendor
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini # Optional: custom PHP config
      - /e/Projects/packages/microservice-utility:/var/www/html/packages/microservice-utility # For windows
      - /e/Projects/packages/caching:/var/www/html/packages/caching # For windows
    networks:
      - laravel

  nginx:
    image: nginx:alpine
    container_name: laravel-nginx
    restart: unless-stopped
    ports:
      - "8000:80"
    volumes:
      - .:/var/www/html
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app
    networks:
      - laravel

  mysql:
    image: mysql:5.7
    container_name: laravel-mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: laravel
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: laravel
      MYSQL_PASSWORD: secret
    ports:
      - "3306:3306"
    volumes:
      - dbdata:/var/lib/mysql
    networks:
      - laravel

  redis:
    image: redis:alpine
    container_name: laravel-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - laravel

volumes:
  dbdata:
  vendor:

networks:
  laravel:
    driver: bridge
